// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/bug/ent/hierarchy"
	"entgo.io/ent/dialect/sql"
)

// Hierarchy is the model entity for the Hierarchy schema.
type Hierarchy struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	// hierarchy name
	Name string `json:"name,omitempty"`
	// Describe holds the value of the "describe" field.
	// hierarchy describe
	Describe string `json:"describe,omitempty"`
	// Sort holds the value of the "sort" field.
	// hierarchy sort
	Sort int `json:"sort,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HierarchyQuery when eager-loading is set.
	Edges HierarchyEdges `json:"edges"`
}

// HierarchyEdges holds the relations/edges for other nodes in the graph.
type HierarchyEdges struct {
	// Child holds the value of the child edge.
	Child []*Hierarchy `json:"child,omitempty"`
	// Parent holds the value of the parent edge.
	Parent []*Hierarchy `json:"parent,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ChildOrErr returns the Child value or an error if the edge
// was not loaded in eager-loading.
func (e HierarchyEdges) ChildOrErr() ([]*Hierarchy, error) {
	if e.loadedTypes[0] {
		return e.Child, nil
	}
	return nil, &NotLoadedError{edge: "child"}
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading.
func (e HierarchyEdges) ParentOrErr() ([]*Hierarchy, error) {
	if e.loadedTypes[1] {
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Hierarchy) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case hierarchy.FieldID, hierarchy.FieldSort:
			values[i] = new(sql.NullInt64)
		case hierarchy.FieldName, hierarchy.FieldDescribe:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Hierarchy", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Hierarchy fields.
func (h *Hierarchy) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hierarchy.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			h.ID = int(value.Int64)
		case hierarchy.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				h.Name = value.String
			}
		case hierarchy.FieldDescribe:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field describe", values[i])
			} else if value.Valid {
				h.Describe = value.String
			}
		case hierarchy.FieldSort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				h.Sort = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryChild queries the "child" edge of the Hierarchy entity.
func (h *Hierarchy) QueryChild() *HierarchyQuery {
	return (&HierarchyClient{config: h.config}).QueryChild(h)
}

// QueryParent queries the "parent" edge of the Hierarchy entity.
func (h *Hierarchy) QueryParent() *HierarchyQuery {
	return (&HierarchyClient{config: h.config}).QueryParent(h)
}

// Update returns a builder for updating this Hierarchy.
// Note that you need to call Hierarchy.Unwrap() before calling this method if this Hierarchy
// was returned from a transaction, and the transaction was committed or rolled back.
func (h *Hierarchy) Update() *HierarchyUpdateOne {
	return (&HierarchyClient{config: h.config}).UpdateOne(h)
}

// Unwrap unwraps the Hierarchy entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (h *Hierarchy) Unwrap() *Hierarchy {
	tx, ok := h.config.driver.(*txDriver)
	if !ok {
		panic("ent: Hierarchy is not a transactional entity")
	}
	h.config.driver = tx.drv
	return h
}

// String implements the fmt.Stringer.
func (h *Hierarchy) String() string {
	var builder strings.Builder
	builder.WriteString("Hierarchy(")
	builder.WriteString(fmt.Sprintf("id=%v", h.ID))
	builder.WriteString(", name=")
	builder.WriteString(h.Name)
	builder.WriteString(", describe=")
	builder.WriteString(h.Describe)
	builder.WriteString(", sort=")
	builder.WriteString(fmt.Sprintf("%v", h.Sort))
	builder.WriteByte(')')
	return builder.String()
}

// Hierarchies is a parsable slice of Hierarchy.
type Hierarchies []*Hierarchy

func (h Hierarchies) config(cfg config) {
	for _i := range h {
		h[_i].config = cfg
	}
}
