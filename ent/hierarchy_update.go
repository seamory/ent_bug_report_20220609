// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/bug/ent/hierarchy"
	"entgo.io/bug/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HierarchyUpdate is the builder for updating Hierarchy entities.
type HierarchyUpdate struct {
	config
	hooks    []Hook
	mutation *HierarchyMutation
}

// Where appends a list predicates to the HierarchyUpdate builder.
func (hu *HierarchyUpdate) Where(ps ...predicate.Hierarchy) *HierarchyUpdate {
	hu.mutation.Where(ps...)
	return hu
}

// SetName sets the "name" field.
func (hu *HierarchyUpdate) SetName(s string) *HierarchyUpdate {
	hu.mutation.SetName(s)
	return hu
}

// SetDescribe sets the "describe" field.
func (hu *HierarchyUpdate) SetDescribe(s string) *HierarchyUpdate {
	hu.mutation.SetDescribe(s)
	return hu
}

// SetSort sets the "sort" field.
func (hu *HierarchyUpdate) SetSort(i int) *HierarchyUpdate {
	hu.mutation.ResetSort()
	hu.mutation.SetSort(i)
	return hu
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (hu *HierarchyUpdate) SetNillableSort(i *int) *HierarchyUpdate {
	if i != nil {
		hu.SetSort(*i)
	}
	return hu
}

// AddSort adds i to the "sort" field.
func (hu *HierarchyUpdate) AddSort(i int) *HierarchyUpdate {
	hu.mutation.AddSort(i)
	return hu
}

// AddChildIDs adds the "child" edge to the Hierarchy entity by IDs.
func (hu *HierarchyUpdate) AddChildIDs(ids ...int) *HierarchyUpdate {
	hu.mutation.AddChildIDs(ids...)
	return hu
}

// AddChild adds the "child" edges to the Hierarchy entity.
func (hu *HierarchyUpdate) AddChild(h ...*Hierarchy) *HierarchyUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hu.AddChildIDs(ids...)
}

// AddParentIDs adds the "parent" edge to the Hierarchy entity by IDs.
func (hu *HierarchyUpdate) AddParentIDs(ids ...int) *HierarchyUpdate {
	hu.mutation.AddParentIDs(ids...)
	return hu
}

// AddParent adds the "parent" edges to the Hierarchy entity.
func (hu *HierarchyUpdate) AddParent(h ...*Hierarchy) *HierarchyUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hu.AddParentIDs(ids...)
}

// Mutation returns the HierarchyMutation object of the builder.
func (hu *HierarchyUpdate) Mutation() *HierarchyMutation {
	return hu.mutation
}

// ClearChild clears all "child" edges to the Hierarchy entity.
func (hu *HierarchyUpdate) ClearChild() *HierarchyUpdate {
	hu.mutation.ClearChild()
	return hu
}

// RemoveChildIDs removes the "child" edge to Hierarchy entities by IDs.
func (hu *HierarchyUpdate) RemoveChildIDs(ids ...int) *HierarchyUpdate {
	hu.mutation.RemoveChildIDs(ids...)
	return hu
}

// RemoveChild removes "child" edges to Hierarchy entities.
func (hu *HierarchyUpdate) RemoveChild(h ...*Hierarchy) *HierarchyUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hu.RemoveChildIDs(ids...)
}

// ClearParent clears all "parent" edges to the Hierarchy entity.
func (hu *HierarchyUpdate) ClearParent() *HierarchyUpdate {
	hu.mutation.ClearParent()
	return hu
}

// RemoveParentIDs removes the "parent" edge to Hierarchy entities by IDs.
func (hu *HierarchyUpdate) RemoveParentIDs(ids ...int) *HierarchyUpdate {
	hu.mutation.RemoveParentIDs(ids...)
	return hu
}

// RemoveParent removes "parent" edges to Hierarchy entities.
func (hu *HierarchyUpdate) RemoveParent(h ...*Hierarchy) *HierarchyUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hu.RemoveParentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hu *HierarchyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(hu.hooks) == 0 {
		affected, err = hu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HierarchyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			hu.mutation = mutation
			affected, err = hu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(hu.hooks) - 1; i >= 0; i-- {
			if hu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = hu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, hu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (hu *HierarchyUpdate) SaveX(ctx context.Context) int {
	affected, err := hu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hu *HierarchyUpdate) Exec(ctx context.Context) error {
	_, err := hu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hu *HierarchyUpdate) ExecX(ctx context.Context) {
	if err := hu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (hu *HierarchyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   hierarchy.Table,
			Columns: hierarchy.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: hierarchy.FieldID,
			},
		},
	}
	if ps := hu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: hierarchy.FieldName,
		})
	}
	if value, ok := hu.mutation.Describe(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: hierarchy.FieldDescribe,
		})
	}
	if value, ok := hu.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: hierarchy.FieldSort,
		})
	}
	if value, ok := hu.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: hierarchy.FieldSort,
		})
	}
	if hu.mutation.ChildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hierarchy.ChildTable,
			Columns: hierarchy.ChildPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hierarchy.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.RemovedChildIDs(); len(nodes) > 0 && !hu.mutation.ChildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hierarchy.ChildTable,
			Columns: hierarchy.ChildPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hierarchy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.ChildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hierarchy.ChildTable,
			Columns: hierarchy.ChildPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hierarchy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hierarchy.ParentTable,
			Columns: hierarchy.ParentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hierarchy.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.RemovedParentIDs(); len(nodes) > 0 && !hu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hierarchy.ParentTable,
			Columns: hierarchy.ParentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hierarchy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hierarchy.ParentTable,
			Columns: hierarchy.ParentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hierarchy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hierarchy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// HierarchyUpdateOne is the builder for updating a single Hierarchy entity.
type HierarchyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HierarchyMutation
}

// SetName sets the "name" field.
func (huo *HierarchyUpdateOne) SetName(s string) *HierarchyUpdateOne {
	huo.mutation.SetName(s)
	return huo
}

// SetDescribe sets the "describe" field.
func (huo *HierarchyUpdateOne) SetDescribe(s string) *HierarchyUpdateOne {
	huo.mutation.SetDescribe(s)
	return huo
}

// SetSort sets the "sort" field.
func (huo *HierarchyUpdateOne) SetSort(i int) *HierarchyUpdateOne {
	huo.mutation.ResetSort()
	huo.mutation.SetSort(i)
	return huo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (huo *HierarchyUpdateOne) SetNillableSort(i *int) *HierarchyUpdateOne {
	if i != nil {
		huo.SetSort(*i)
	}
	return huo
}

// AddSort adds i to the "sort" field.
func (huo *HierarchyUpdateOne) AddSort(i int) *HierarchyUpdateOne {
	huo.mutation.AddSort(i)
	return huo
}

// AddChildIDs adds the "child" edge to the Hierarchy entity by IDs.
func (huo *HierarchyUpdateOne) AddChildIDs(ids ...int) *HierarchyUpdateOne {
	huo.mutation.AddChildIDs(ids...)
	return huo
}

// AddChild adds the "child" edges to the Hierarchy entity.
func (huo *HierarchyUpdateOne) AddChild(h ...*Hierarchy) *HierarchyUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return huo.AddChildIDs(ids...)
}

// AddParentIDs adds the "parent" edge to the Hierarchy entity by IDs.
func (huo *HierarchyUpdateOne) AddParentIDs(ids ...int) *HierarchyUpdateOne {
	huo.mutation.AddParentIDs(ids...)
	return huo
}

// AddParent adds the "parent" edges to the Hierarchy entity.
func (huo *HierarchyUpdateOne) AddParent(h ...*Hierarchy) *HierarchyUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return huo.AddParentIDs(ids...)
}

// Mutation returns the HierarchyMutation object of the builder.
func (huo *HierarchyUpdateOne) Mutation() *HierarchyMutation {
	return huo.mutation
}

// ClearChild clears all "child" edges to the Hierarchy entity.
func (huo *HierarchyUpdateOne) ClearChild() *HierarchyUpdateOne {
	huo.mutation.ClearChild()
	return huo
}

// RemoveChildIDs removes the "child" edge to Hierarchy entities by IDs.
func (huo *HierarchyUpdateOne) RemoveChildIDs(ids ...int) *HierarchyUpdateOne {
	huo.mutation.RemoveChildIDs(ids...)
	return huo
}

// RemoveChild removes "child" edges to Hierarchy entities.
func (huo *HierarchyUpdateOne) RemoveChild(h ...*Hierarchy) *HierarchyUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return huo.RemoveChildIDs(ids...)
}

// ClearParent clears all "parent" edges to the Hierarchy entity.
func (huo *HierarchyUpdateOne) ClearParent() *HierarchyUpdateOne {
	huo.mutation.ClearParent()
	return huo
}

// RemoveParentIDs removes the "parent" edge to Hierarchy entities by IDs.
func (huo *HierarchyUpdateOne) RemoveParentIDs(ids ...int) *HierarchyUpdateOne {
	huo.mutation.RemoveParentIDs(ids...)
	return huo
}

// RemoveParent removes "parent" edges to Hierarchy entities.
func (huo *HierarchyUpdateOne) RemoveParent(h ...*Hierarchy) *HierarchyUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return huo.RemoveParentIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (huo *HierarchyUpdateOne) Select(field string, fields ...string) *HierarchyUpdateOne {
	huo.fields = append([]string{field}, fields...)
	return huo
}

// Save executes the query and returns the updated Hierarchy entity.
func (huo *HierarchyUpdateOne) Save(ctx context.Context) (*Hierarchy, error) {
	var (
		err  error
		node *Hierarchy
	)
	if len(huo.hooks) == 0 {
		node, err = huo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HierarchyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			huo.mutation = mutation
			node, err = huo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(huo.hooks) - 1; i >= 0; i-- {
			if huo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = huo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, huo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (huo *HierarchyUpdateOne) SaveX(ctx context.Context) *Hierarchy {
	node, err := huo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (huo *HierarchyUpdateOne) Exec(ctx context.Context) error {
	_, err := huo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (huo *HierarchyUpdateOne) ExecX(ctx context.Context) {
	if err := huo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (huo *HierarchyUpdateOne) sqlSave(ctx context.Context) (_node *Hierarchy, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   hierarchy.Table,
			Columns: hierarchy.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: hierarchy.FieldID,
			},
		},
	}
	id, ok := huo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Hierarchy.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := huo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hierarchy.FieldID)
		for _, f := range fields {
			if !hierarchy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hierarchy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := huo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := huo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: hierarchy.FieldName,
		})
	}
	if value, ok := huo.mutation.Describe(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: hierarchy.FieldDescribe,
		})
	}
	if value, ok := huo.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: hierarchy.FieldSort,
		})
	}
	if value, ok := huo.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: hierarchy.FieldSort,
		})
	}
	if huo.mutation.ChildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hierarchy.ChildTable,
			Columns: hierarchy.ChildPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hierarchy.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.RemovedChildIDs(); len(nodes) > 0 && !huo.mutation.ChildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hierarchy.ChildTable,
			Columns: hierarchy.ChildPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hierarchy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.ChildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hierarchy.ChildTable,
			Columns: hierarchy.ChildPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hierarchy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if huo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hierarchy.ParentTable,
			Columns: hierarchy.ParentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hierarchy.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.RemovedParentIDs(); len(nodes) > 0 && !huo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hierarchy.ParentTable,
			Columns: hierarchy.ParentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hierarchy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hierarchy.ParentTable,
			Columns: hierarchy.ParentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hierarchy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Hierarchy{config: huo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, huo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hierarchy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
