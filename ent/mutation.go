// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/bug/ent/hierarchy"
	"entgo.io/bug/ent/predicate"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeHierarchy = "Hierarchy"
)

// HierarchyMutation represents an operation that mutates the Hierarchy nodes in the graph.
type HierarchyMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	describe      *string
	sort          *int
	addsort       *int
	clearedFields map[string]struct{}
	child         map[int]struct{}
	removedchild  map[int]struct{}
	clearedchild  bool
	parent        map[int]struct{}
	removedparent map[int]struct{}
	clearedparent bool
	done          bool
	oldValue      func(context.Context) (*Hierarchy, error)
	predicates    []predicate.Hierarchy
}

var _ ent.Mutation = (*HierarchyMutation)(nil)

// hierarchyOption allows management of the mutation configuration using functional options.
type hierarchyOption func(*HierarchyMutation)

// newHierarchyMutation creates new mutation for the Hierarchy entity.
func newHierarchyMutation(c config, op Op, opts ...hierarchyOption) *HierarchyMutation {
	m := &HierarchyMutation{
		config:        c,
		op:            op,
		typ:           TypeHierarchy,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withHierarchyID sets the ID field of the mutation.
func withHierarchyID(id int) hierarchyOption {
	return func(m *HierarchyMutation) {
		var (
			err   error
			once  sync.Once
			value *Hierarchy
		)
		m.oldValue = func(ctx context.Context) (*Hierarchy, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Hierarchy.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withHierarchy sets the old Hierarchy of the mutation.
func withHierarchy(node *Hierarchy) hierarchyOption {
	return func(m *HierarchyMutation) {
		m.oldValue = func(context.Context) (*Hierarchy, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m HierarchyMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m HierarchyMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *HierarchyMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *HierarchyMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Hierarchy.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *HierarchyMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *HierarchyMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Hierarchy entity.
// If the Hierarchy object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HierarchyMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *HierarchyMutation) ResetName() {
	m.name = nil
}

// SetDescribe sets the "describe" field.
func (m *HierarchyMutation) SetDescribe(s string) {
	m.describe = &s
}

// Describe returns the value of the "describe" field in the mutation.
func (m *HierarchyMutation) Describe() (r string, exists bool) {
	v := m.describe
	if v == nil {
		return
	}
	return *v, true
}

// OldDescribe returns the old "describe" field's value of the Hierarchy entity.
// If the Hierarchy object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HierarchyMutation) OldDescribe(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescribe is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescribe requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescribe: %w", err)
	}
	return oldValue.Describe, nil
}

// ResetDescribe resets all changes to the "describe" field.
func (m *HierarchyMutation) ResetDescribe() {
	m.describe = nil
}

// SetSort sets the "sort" field.
func (m *HierarchyMutation) SetSort(i int) {
	m.sort = &i
	m.addsort = nil
}

// Sort returns the value of the "sort" field in the mutation.
func (m *HierarchyMutation) Sort() (r int, exists bool) {
	v := m.sort
	if v == nil {
		return
	}
	return *v, true
}

// OldSort returns the old "sort" field's value of the Hierarchy entity.
// If the Hierarchy object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HierarchyMutation) OldSort(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSort: %w", err)
	}
	return oldValue.Sort, nil
}

// AddSort adds i to the "sort" field.
func (m *HierarchyMutation) AddSort(i int) {
	if m.addsort != nil {
		*m.addsort += i
	} else {
		m.addsort = &i
	}
}

// AddedSort returns the value that was added to the "sort" field in this mutation.
func (m *HierarchyMutation) AddedSort() (r int, exists bool) {
	v := m.addsort
	if v == nil {
		return
	}
	return *v, true
}

// ResetSort resets all changes to the "sort" field.
func (m *HierarchyMutation) ResetSort() {
	m.sort = nil
	m.addsort = nil
}

// AddChildIDs adds the "child" edge to the Hierarchy entity by ids.
func (m *HierarchyMutation) AddChildIDs(ids ...int) {
	if m.child == nil {
		m.child = make(map[int]struct{})
	}
	for i := range ids {
		m.child[ids[i]] = struct{}{}
	}
}

// ClearChild clears the "child" edge to the Hierarchy entity.
func (m *HierarchyMutation) ClearChild() {
	m.clearedchild = true
}

// ChildCleared reports if the "child" edge to the Hierarchy entity was cleared.
func (m *HierarchyMutation) ChildCleared() bool {
	return m.clearedchild
}

// RemoveChildIDs removes the "child" edge to the Hierarchy entity by IDs.
func (m *HierarchyMutation) RemoveChildIDs(ids ...int) {
	if m.removedchild == nil {
		m.removedchild = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.child, ids[i])
		m.removedchild[ids[i]] = struct{}{}
	}
}

// RemovedChild returns the removed IDs of the "child" edge to the Hierarchy entity.
func (m *HierarchyMutation) RemovedChildIDs() (ids []int) {
	for id := range m.removedchild {
		ids = append(ids, id)
	}
	return
}

// ChildIDs returns the "child" edge IDs in the mutation.
func (m *HierarchyMutation) ChildIDs() (ids []int) {
	for id := range m.child {
		ids = append(ids, id)
	}
	return
}

// ResetChild resets all changes to the "child" edge.
func (m *HierarchyMutation) ResetChild() {
	m.child = nil
	m.clearedchild = false
	m.removedchild = nil
}

// AddParentIDs adds the "parent" edge to the Hierarchy entity by ids.
func (m *HierarchyMutation) AddParentIDs(ids ...int) {
	if m.parent == nil {
		m.parent = make(map[int]struct{})
	}
	for i := range ids {
		m.parent[ids[i]] = struct{}{}
	}
}

// ClearParent clears the "parent" edge to the Hierarchy entity.
func (m *HierarchyMutation) ClearParent() {
	m.clearedparent = true
}

// ParentCleared reports if the "parent" edge to the Hierarchy entity was cleared.
func (m *HierarchyMutation) ParentCleared() bool {
	return m.clearedparent
}

// RemoveParentIDs removes the "parent" edge to the Hierarchy entity by IDs.
func (m *HierarchyMutation) RemoveParentIDs(ids ...int) {
	if m.removedparent == nil {
		m.removedparent = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.parent, ids[i])
		m.removedparent[ids[i]] = struct{}{}
	}
}

// RemovedParent returns the removed IDs of the "parent" edge to the Hierarchy entity.
func (m *HierarchyMutation) RemovedParentIDs() (ids []int) {
	for id := range m.removedparent {
		ids = append(ids, id)
	}
	return
}

// ParentIDs returns the "parent" edge IDs in the mutation.
func (m *HierarchyMutation) ParentIDs() (ids []int) {
	for id := range m.parent {
		ids = append(ids, id)
	}
	return
}

// ResetParent resets all changes to the "parent" edge.
func (m *HierarchyMutation) ResetParent() {
	m.parent = nil
	m.clearedparent = false
	m.removedparent = nil
}

// Where appends a list predicates to the HierarchyMutation builder.
func (m *HierarchyMutation) Where(ps ...predicate.Hierarchy) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *HierarchyMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Hierarchy).
func (m *HierarchyMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *HierarchyMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, hierarchy.FieldName)
	}
	if m.describe != nil {
		fields = append(fields, hierarchy.FieldDescribe)
	}
	if m.sort != nil {
		fields = append(fields, hierarchy.FieldSort)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *HierarchyMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case hierarchy.FieldName:
		return m.Name()
	case hierarchy.FieldDescribe:
		return m.Describe()
	case hierarchy.FieldSort:
		return m.Sort()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *HierarchyMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case hierarchy.FieldName:
		return m.OldName(ctx)
	case hierarchy.FieldDescribe:
		return m.OldDescribe(ctx)
	case hierarchy.FieldSort:
		return m.OldSort(ctx)
	}
	return nil, fmt.Errorf("unknown Hierarchy field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HierarchyMutation) SetField(name string, value ent.Value) error {
	switch name {
	case hierarchy.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case hierarchy.FieldDescribe:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescribe(v)
		return nil
	case hierarchy.FieldSort:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSort(v)
		return nil
	}
	return fmt.Errorf("unknown Hierarchy field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *HierarchyMutation) AddedFields() []string {
	var fields []string
	if m.addsort != nil {
		fields = append(fields, hierarchy.FieldSort)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *HierarchyMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case hierarchy.FieldSort:
		return m.AddedSort()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HierarchyMutation) AddField(name string, value ent.Value) error {
	switch name {
	case hierarchy.FieldSort:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSort(v)
		return nil
	}
	return fmt.Errorf("unknown Hierarchy numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *HierarchyMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *HierarchyMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *HierarchyMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Hierarchy nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *HierarchyMutation) ResetField(name string) error {
	switch name {
	case hierarchy.FieldName:
		m.ResetName()
		return nil
	case hierarchy.FieldDescribe:
		m.ResetDescribe()
		return nil
	case hierarchy.FieldSort:
		m.ResetSort()
		return nil
	}
	return fmt.Errorf("unknown Hierarchy field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *HierarchyMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.child != nil {
		edges = append(edges, hierarchy.EdgeChild)
	}
	if m.parent != nil {
		edges = append(edges, hierarchy.EdgeParent)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *HierarchyMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case hierarchy.EdgeChild:
		ids := make([]ent.Value, 0, len(m.child))
		for id := range m.child {
			ids = append(ids, id)
		}
		return ids
	case hierarchy.EdgeParent:
		ids := make([]ent.Value, 0, len(m.parent))
		for id := range m.parent {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *HierarchyMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedchild != nil {
		edges = append(edges, hierarchy.EdgeChild)
	}
	if m.removedparent != nil {
		edges = append(edges, hierarchy.EdgeParent)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *HierarchyMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case hierarchy.EdgeChild:
		ids := make([]ent.Value, 0, len(m.removedchild))
		for id := range m.removedchild {
			ids = append(ids, id)
		}
		return ids
	case hierarchy.EdgeParent:
		ids := make([]ent.Value, 0, len(m.removedparent))
		for id := range m.removedparent {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *HierarchyMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedchild {
		edges = append(edges, hierarchy.EdgeChild)
	}
	if m.clearedparent {
		edges = append(edges, hierarchy.EdgeParent)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *HierarchyMutation) EdgeCleared(name string) bool {
	switch name {
	case hierarchy.EdgeChild:
		return m.clearedchild
	case hierarchy.EdgeParent:
		return m.clearedparent
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *HierarchyMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Hierarchy unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *HierarchyMutation) ResetEdge(name string) error {
	switch name {
	case hierarchy.EdgeChild:
		m.ResetChild()
		return nil
	case hierarchy.EdgeParent:
		m.ResetParent()
		return nil
	}
	return fmt.Errorf("unknown Hierarchy edge %s", name)
}
